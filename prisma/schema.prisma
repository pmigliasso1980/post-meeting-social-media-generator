generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(cuid())
  name                    String?
  email                   String?   @unique
  emailVerified           DateTime?
  image                   String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  recallJoinMinutesBefore Int       @default(5)

  accounts       Account[]
  sessions       Session[]
  events         CalendarEvent[]
  meetings       Meeting[]
  socialAccounts SocialAccount[]
  automations    Automation[]
}

model Account {
  id                       String    @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  // convenience
  email                    String?
  name                     String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime? @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CalendarEvent {
  id               String   @id @default(cuid())
  userId           String
  provider         String
  providerEventId  String
  title            String
  description      String?
  startTime        DateTime
  endTime          DateTime
  attendeesJson    Json?
  location         String?
  conferencingLink String?
  platform         String?
  notetakerEnabled Boolean  @default(false)

  // NEW: multi-account support (from the Account row that synced it)
  accountId    String? // Account.id
  accountEmail String? // convenience (Account.email)

  recallBotId  String?
  recallStatus String?

  meeting Meeting?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerEventId])
  @@index([userId, startTime])
  @@index([userId, accountId])
}

model Meeting {
  id              String    @id @default(cuid())
  userId          String
  calendarEventId String    @unique
  startedAt       DateTime
  endedAt         DateTime?
  attendeesJson   Json?
  platform        String?
  transcriptUrl   String?
  audioUrl        String?
  videoUrl        String?
  aiFollowupEmail String?   @db.Text
  createdAt       DateTime  @default(now())

  socialPosts SocialPost[]

  user  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  event CalendarEvent @relation(fields: [calendarEventId], references: [id], onDelete: Cascade)
}

model SocialAccount {
  id           String  @id @default(cuid())
  userId       String
  provider     String // 'linkedin' | 'facebook'
  accessToken  String?
  refreshToken String?
  expiresAt    Int?
  accountId    String? // LinkedIn URN or Facebook Page/User ID

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider], name: "userId_provider")
  @@index([userId, provider])
}

model Automation {
  id             String   @id @default(cuid())
  userId         String
  provider       String // 'linkedin' | 'facebook'
  name           String
  promptTemplate String
  isEnabled      Boolean  @default(true)
  createdAt      DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, provider, isEnabled])
}

model SocialPost {
  id        String    @id @default(cuid())
  meetingId String
  provider  String
  draftText String
  postedAt  DateTime?
  postUrl   String?

  meeting Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
}
